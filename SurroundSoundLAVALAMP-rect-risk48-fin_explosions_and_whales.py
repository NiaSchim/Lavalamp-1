#-------------------------------------------------------------------------------
# Name:        LavalampParticles.py
# Purpose: pretty visualizer
#
# Author:      The Schim
#
# Created:     16/03/2023
# Copyright:   (c) The Schim 2023
# Licence:     CC0
#-------------------------------------------------------------------------------
import pygame
import random
import math
from colorsys import hsv_to_rgb, rgb_to_hsv
import uuid

# Constants
WIDTH, HEIGHT = 800, 600
BG_COLOR = (0, 0, 0)
FPS = 60
MIN_RADIUS = 33.3
MAX_RADIUS = 99.9
SPLIT_PROB = 0.29
DEPTH = 700
cooldown = random.randint(314, 6400)
INITIAL_GLOBS = 25
MAX_NUMBER_GLOBS = 115
SPEED_DIVISOR = 2.0+(1/math.pi)
AGE_FACTOR = 0.1
TRANSFER = 0.00075

from scipy.signal import firwin, lfilter
import numpy as np
import simpleaudio as sa
import scipy.signal
import threading
import time
import sounddevice as sd
import scipy.optimize as opt

# Define audio constants
SAMPLE_RATE = int(44100//100)
BIT_DEPTH = -16
NUM_CHANNELS = 2
AUDIO_BUFFER_SIZE = round(1024*2)
NUM_CHANNELS = 2  # mono audio with psuedo surround
AMPLITUDE = 5 # maximum amplitude of the audio signal
PENTATONIC_SCALE = [2, 4, 6, 9, 11]  # pentatonic scale intervals in semitones
OCTAVES = 8  # number of octaves to span with the pentatonic scale
BASE_FREQ = 466.16
SEMITONE_RATIO =  1.
FRAME_INTERVAL = (((FPS/(math.pi+1)**1.835/(1.00756))*((math.pi*2.5)))/2.658)/(math.pi*.938)
FRAME_INTERVAL2 =  FPS/math.pi
BUFFER_OVERLAP = AUDIO_BUFFER_SIZE
start = True
thread_running = True

# Add these lines at the beginning of the script
pygame.mixer.init()
pygame.mixer.set_num_channels(2)
# Define global variables
current_buffer = bytes()
current_buffer_lock = threading.Lock()

def generate_next_buffer(globs):
    VOLUME_SHRINK_FACTOR=1
    speed_of_sound_in_water = 197.4
    max_distance =DEPTH/3
    num_samples = int(FRAME_INTERVAL * SAMPLE_RATE)
    next_signal = np.zeros((num_samples,), dtype=np.float32)

    for glob in globs:
        distance = math.sqrt((glob.x - WIDTH / 2) ** 2 + (glob.y - HEIGHT / 2) ** 2 + (glob.z - DEPTH / 2) ** 2)
        if distance >= max_distance:
            amplitude = 0
        else:
            frequency = BASE_FREQ * SEMITONE_RATIO ** (PENTATONIC_SCALE[glob.num_globs % len(PENTATONIC_SCALE)] +
                                                      OCTAVES * math.log2(glob.radius) +
                                                      2 * math.log2(max_distance / (distance + max_distance)))

            # Parabolic function for amplitude
            amplitude = AMPLITUDE * (1 - 4 * (glob.z / DEPTH - 0.5) ** 2)

            # Multiply amplitude by the inverse of the frequency
            amplitude *= 1 / frequency

            if glob.vz > 0:
                if glob.z > DEPTH / 2:
                    doppler_shift = 1 + (speed_of_sound_in_water / 36) * (glob.vz / (DEPTH - glob.z))
                else:
                    doppler_shift = 1 - (speed_of_sound_in_water / 36) * (glob.vz / glob.z)
            else:
                if glob.z > DEPTH / 2:
                    doppler_shift = 1 - (speed_of_sound_in_water / 36) * (glob.vz / (DEPTH - glob.z))
                else:
                    doppler_shift = 1 + (speed_of_sound_in_water / 36) * (glob.vz / glob.z)

            amplitude *= doppler_shift

            # Generate triangle wave with the desired amplitude and Doppler shift
            triangle_wave = generate_triangle_wave(num_samples, frequency * doppler_shift, amplitude)
            next_signal += triangle_wave

    # Normalize the signal and convert to int8
    max_value = np.max(np.abs(next_signal))
    if max_value > 0:
        next_signal /= max_value
    else:
        next_signal = np.zeros((num_samples,), dtype=np.float32)

    # Multiply the signal by the volume shrink factor
    next_signal *= VOLUME_SHRINK_FACTOR

    fade_in_samples = round(SAMPLE_RATE * 1/8)  # ms fade in
    fade_out_samples = round(SAMPLE_RATE * 1/8)  # ms fade out
    next_signal = apply_fade(next_signal, fade_in_samples, fade_out_samples)

    next_signal_bytes = (next_signal * 127).astype(np.int8)

    # Ensure the buffer size is a multiple of bytes-per-sample and the number of channels
    buffer_size = len(next_signal_bytes)
    remainder = buffer_size % (NUM_CHANNELS * 1)  # 1 byte per sample for int8

    if remainder != 0:
        padding_size = NUM_CHANNELS * 1 - remainder
        next_signal_bytes = np.concatenate((next_signal_bytes, np.zeros(padding_size, dtype=np.int8)))

    return next_signal_bytes

def generate_next_buffer_thread(globs):
    global current_buffer
    next_buffer = generate_next_buffer(globs)
    current_buffer_lock.acquire()
    current_buffer = next_buffer
    current_buffer_lock.release()

def apply_fade(signal, fade_in_samples, fade_out_samples):
    fade_in = np.linspace(0, 1, fade_in_samples)
    signal[:fade_in_samples] = (signal[:fade_in_samples] * fade_in).astype(np.int8)

    if fade_out_samples > 0:
        fade_out = np.linspace(1, 0, fade_out_samples)
        signal[-fade_out_samples:] = (signal[-fade_out_samples:] * fade_out).astype(np.int8)

    return signal


def process_buffer(buffer, prev_buffer):
    if buffer.ndim > 1:
        buffer_mono = np.mean(buffer, axis=1).astype(np.int16)
    else:
        buffer_mono = buffer.astype(np.int16)

    buffer_mono_sq = buffer_mono * buffer_mono
    buffer_mono_sq = buffer_mono_sq.astype(np.int16)

    if prev_buffer is not None:
        crossfaded_data = crossfade(prev_buffer[-BUFFER_OVERLAP:], buffer_mono_sq[:BUFFER_OVERLAP], BUFFER_OVERLAP // 3)
        buffer_mono_sq[:crossfaded_data.shape[0]] = crossfaded_data

    return buffer_mono_sq


def play_buffer(channel_group, buffer, prev_buffer):
    buffer_mono_sq = process_buffer(buffer, prev_buffer)
    buffer_stereo_sq = np.repeat(buffer_mono_sq[:, np.newaxis], 2, axis=1)  # Duplicate mono signal into 2 identical channels
    sound = pygame.sndarray.make_sound(buffer_stereo_sq.astype(np.int16))
    channel_group.queue(sound)
    return buffer_mono_sq


def play_audio(globs, buffer1, buffer2, buffer3, thread_running, FRAME_INTERVAL):
    prev_buffer = np.zeros((AUDIO_BUFFER_SIZE * NUM_CHANNELS,), dtype=np.float64)

    while thread_running:
        channel_group1 = pygame.mixer.find_channel()
        channel_group2 = pygame.mixer.find_channel()
        channel_group3 = pygame.mixer.find_channel()

        prev_buffer = play_buffer(channel_group1, buffer1, prev_buffer)
        prev_buffer = play_buffer(channel_group2, buffer2, prev_buffer)
        prev_buffer = play_buffer(channel_group3, buffer3, prev_buffer)

        new_buffer = generate_next_buffer(globs)
        buffer1, buffer2, buffer3 = buffer2, buffer3, new_buffer
        pygame.time.wait(int(1000 * AUDIO_BUFFER_SIZE / SAMPLE_RATE))

def play_audio_second_interval(globs, buffer1, buffer2, buffer3, thread_running):
    play_audio(globs, buffer1, buffer2, buffer3, thread_running, FRAME_INTERVAL2)

def brachistochrone_curve(t, total_time):
    def f(cycloid_param):
        return cycloid_param - total_time * (1 - np.sin(cycloid_param)) / 2

    cycloid_param = opt.newton(f, 1)
    return (1 - np.cos(t * cycloid_param / total_time)) / 2

def crossfade(buffer1, buffer2, fade_duration):
    fade_duration = min(fade_duration, len(buffer1), len(buffer2))
    t = np.linspace(0, fade_duration, fade_duration)
    fade_out = 1 - brachistochrone_curve(t, fade_duration)
    fade_in = brachistochrone_curve(t, fade_duration)
    faded_buffer1 = buffer1[-fade_duration:] * fade_out
    faded_buffer2 = buffer2[:fade_duration] * fade_in
    return (faded_buffer1 + faded_buffer2).astype(np.int8)

def generate_pink_noise(num_samples, frequency, amplitude):
    """Generates pink noise using a simple approximation algorithm."""
    # Initialize the pink noise array with random values
    pink_noise = np.random.rand(num_samples)
    # Calculate the alpha value based on the frequency and amplitude
    alpha = amplitude * (math.sqrt(2)/10) * frequency
    # Apply a simple approximation filter to the pink noise
    for i in range(1, num_samples):
        pink_noise[i] = alpha * pink_noise[i] + (1 - alpha) * pink_noise[i-1]
    return amplitude * pink_noise

def generate_white_noise(num_samples, frequency, amplitude):
    """Generates white noise using NumPy's random module."""
    white_noise = np.random.randn(num_samples)
    return -amplitude * white_noise

#we're not really generating a triangle wave anymore, I'm just lazy, so I'm changing one function instead of 1 function and a billion name-calls
def generate_triangle_wave(num_samples, frequency, amplitude=1.0):
    """Generates a sine wave with the given frequency, amplitude, and sample rate."""
    t = np.linspace(0, num_samples / AUDIO_BUFFER_SIZE, num_samples, endpoint=False)
    triangle_wave = amplitude * np.sin(2 * np.pi * frequency * t)
    return triangle_wave

def generate_audio_signal(globs, VOLUME_SHRINK_FACTOR=0.85):
    VOLUME_SHRINK_FACTOR=1
    speed_of_sound_in_water = 197.4
    max_distance =DEPTH/3
    num_samples = int(FRAME_INTERVAL * SAMPLE_RATE)
    signal = np.zeros((num_samples,), dtype=np.float32)

    for glob in globs:
        distance = math.sqrt((glob.x - WIDTH / 2) ** 2 + (glob.y - HEIGHT / 2) ** 2 + (glob.z - DEPTH / 2) ** 2)
        if distance >= max_distance:
            amplitude = 0
        else:
            frequency = BASE_FREQ * SEMITONE_RATIO ** (PENTATONIC_SCALE[glob.num_globs % len(PENTATONIC_SCALE)] +
                                                      OCTAVES * math.log2(glob.radius) +
                                                      2 * math.log2(max_distance / (distance + max_distance)))

            # Parabolic function for amplitude
            amplitude = AMPLITUDE * (1 - 4 * (glob.z / DEPTH - 0.5) ** 2)

            # Multiply amplitude by the inverse of the frequency
            amplitude *= 1 / frequency

            if glob.vz > 0:
                if glob.z > DEPTH / 2:
                    doppler_shift = 1 + (speed_of_sound_in_water / 36) * (glob.vz / (DEPTH - glob.z))
                else:
                    doppler_shift = 1 - (speed_of_sound_in_water / 36) * (glob.vz / glob.z)
            else:
                if glob.z > DEPTH / 2:
                    doppler_shift = 1 - (speed_of_sound_in_water / 36) * (glob.vz / (DEPTH - glob.z))
                else:
                    doppler_shift = 1 + (speed_of_sound_in_water / 36) * (glob.vz / glob.z)

            amplitude *= doppler_shift

            # Generate triangle wave with the desired amplitude and Doppler shift
            triangle_wave = generate_triangle_wave(num_samples, frequency * doppler_shift, amplitude)
            signal += triangle_wave

    # Normalize the signal and convert to int8
    max_value = np.max(np.abs(next_signal))
    if max_value > 0:
        signal /= max_value
    else:
        signal = np.zeros((num_samples,), dtype=np.float32)

    # Multiply the signal by the volume shrink factor
    signal *= VOLUME_SHRINK_FACTOR

    fade_in_samples = round(SAMPLE_RATE * 1/8)  # ms fade in
    fade_out_samples = round(SAMPLE_RATE * 1/8)  # ms fade out
    signal = apply_fade(signal, fade_in_samples, fade_out_samples)

    signal_bytes = (signal * 127).astype(np.int8)

    # Ensure the buffer size is a multiple of bytes-per-sample and the number of channels
    buffer_size = len(signal_bytes)
    remainder = buffer_size % (NUM_CHANNELS * 1)  # 1 byte per sample for int8

    if remainder != 0:
        padding_size = NUM_CHANNELS * 1 - remainder
        signal_bytes = np.concatenate((signal_bytes, np.zeros(padding_size, dtype=np.int8)))

    return signal_bytes



def random_point_on_ellipsoid(a, b, c):
    while True:
        u = random.uniform(-1, 1)
        v = random.uniform(-1, 1)
        w = random.uniform(-1, 1)
        d = u**2/a**2 + v**2/b**2 + w**2/c**2

        if d <= 1:
            break

    x = (WIDTH / 2) + a * u
    y = (HEIGHT / 2) + b * v
    z = (DEPTH / 2) + c * w

    x = max(MIN_RADIUS, min(WIDTH - MIN_RADIUS, x))
    y = max(MIN_RADIUS, min(HEIGHT - MIN_RADIUS, y))
    z = max(MIN_RADIUS, min(DEPTH - MIN_RADIUS, z))

    return x, y, z

def color_difference(color1, color2):
    return sum(abs(color1[i] - color2[i]) for i in range(3))

def is_similar_color(color1, color2, threshold=32):
    return color_difference(color1, color2) < threshold

def calculate_mutation_range(globs):
    total_globs = len(globs)
    similar_color_count = 0

    for i in range(total_globs):
        for j in range(i+1, total_globs):
            if is_similar_color(globs[i].color, globs[j].color):
                similar_color_count += 1

    percentage_similar_color = similar_color_count / total_globs
    mutation_range = int(percentage_similar_color * 255)

    return mutation_range

def wild_color_mutation(parent_color, mutation_range):
    mutated_color = tuple(
        max(64, min(255, parent_color[i] + random.randint(-mutation_range, mutation_range)))
        for i in range(3)
    )
    return mutated_color

# Add a helper function to lerp between two values
def lerp(a, b, t):
    return a + (b - a) * t

class Glob:
    def __init__(self, x, y, z, radius, color, set_id=None, glob_sets=None):
        self.x = x
        self.y = y
        self.z = z
        self.radius = radius
        self.color = color
        self.glob_sets = glob_sets if glob_sets is not None else {}  # set default value
        self.creation_time = pygame.time.get_ticks()
        self.milestone1 = self.color
        self.milestone2 = self._get_next_milestone(self.color)
        self.lerp_t = 0
        self.lerp_speed = 0.0084

        if set_id is None:
            set_id = str(uuid.uuid4())

        self.set_id = set_id

        if self.set_id not in self.glob_sets:
            self.glob_sets[self.set_id] = set()
        self.glob_sets[self.set_id].add(self)

        speed_multiplier = 28.88 / self.radius
        self.vx = (random.uniform(-1, 1) / speed_multiplier) / SPEED_DIVISOR
        self.vy = (random.uniform(-1, 1) / speed_multiplier) / SPEED_DIVISOR
        self.vz = (random.uniform(-1, 1) / speed_multiplier) / SPEED_DIVISOR

        if self.radius == MAX_RADIUS:
            self.num_globs = len(INITIAL_GLOBS)
        else:
            self.num_globs = round(self.radius / (MAX_RADIUS / INITIAL_GLOBS))

        self.split_prob = SPLIT_PROB

    def _get_next_milestone(self, current_color):
        next_color = []
        for channel in current_color:
            min_val = max(0, channel - 128)
            max_val = min(255, channel + (255 - channel))
            next_channel = random.randint(min_val, max_val)
            next_color.append(next_channel)
        return tuple(next_color)

    def split(self, globs):
        if len(globs) < MAX_NUMBER_GLOBS and random.random() < self.split_prob:
            new_globs = []
            num_new_globs = random.randint(round(2*((self.radius/MAX_RADIUS*0.5)+1)), round(5*((self.radius/MAX_RADIUS*0.5)+1)))
            for _ in range(num_new_globs):
                new_x = self.x + random.uniform(-self.radius, self.radius)
                new_y = self.y + random.uniform(-self.radius, self.radius)
                new_z = self.z + random.uniform(-self.radius, self.radius)
                new_radius = self.radius / num_new_globs

                # Use wild color mutation for offspring
                mutation_range = calculate_mutation_range(globs)
                new_color = wild_color_mutation(self.color, mutation_range)

                new_glob = Glob(new_x, new_y, new_z, new_radius, new_color, self.set_id, self.glob_sets)
                new_glob.split_prob = self.split_prob
                new_globs.append(new_glob)
            return new_globs
        else:

            return None

    def draw(self, screen, bg_color):
        scale_factor = get_scale_factor(self.z, DEPTH)

        x = self.x * scale_factor + (1 - scale_factor) * (WIDTH / 2)
        y = self.y * scale_factor + (1 - scale_factor) * (HEIGHT / 2)
        scaled_radius = int(self.radius * scale_factor)

        r = int(self.color[0] * scale_factor + bg_color[0] * (1 - scale_factor))
        g = int(self.color[1] * scale_factor + bg_color[1] * (1 - scale_factor))
        b = int(self.color[2] * scale_factor + bg_color[2] * (1 - scale_factor))
        fade_color = (r, g, b)

        # Ensure fade_color is a valid RGB tuple
        fade_color = tuple(max(0, min(c, 255)) for c in fade_color)

        pygame.draw.circle(screen, fade_color, (int(x), int(y)), scaled_radius)

    def update(self, globs, glob_sets):
        global TRANSFER
        removed = False
        # Move glob according to its speed
        self.x += self.vx
        self.y += self.vy
        self.z += self.vz

        # Apply boundary conditions
        self.x %= WIDTH
        self.y %= HEIGHT
        self.z %= DEPTH

        # Update color according to the current milestones
        if self.lerp_t < 1:
            self.color = tuple(int(lerp(self.milestone1[i], self.milestone2[i], self.lerp_t)) for i in range(3))
            self.lerp_t += self.lerp_speed
        else:
            self.milestone1 = self.milestone2
            self.milestone2 = self._get_next_milestone(self.color)
            self.lerp_t = 0

        # Move globs out of sibling set if they are far enough apart
        siblings = [g for g in self.glob_sets[self.set_id] if g != self]
        for sibling in siblings:
            distance = math.sqrt((self.x - sibling.x)**2 + (self.y - sibling.y)**2 + (self.z - sibling.z)**2)
            if distance > 2 * self.radius:
                self.glob_sets[self.set_id].remove(self)
                new_set_id = str(uuid.uuid4())
                self.set_id = new_set_id
                self.glob_sets[new_set_id] = {self}
                break

        # Handle glob collision and color blending
        for other in globs:
            if other != self:
                distance = math.sqrt((self.x - other.x)**2 + (self.y - other.y)**2 + (self.z - other.z)**2)
                if distance <= self.radius + other.radius:
                    if self.radius > other.radius:
                        larger, smaller = self, other
                    else:
                        larger, smaller = other, self

                    transfer_rate = TRANSFER  # Adjust this value to control the transfer rate
                    transferred_radius = smaller.radius * transfer_rate
                    larger.radius += transferred_radius
                    smaller.radius -= transferred_radius

                    # Color blending
                    larger_area = math.pi * larger.radius**2
                    smaller_area = math.pi * smaller.radius**2
                    total_area = larger_area + smaller_area
                    new_color = tuple(int((larger_area * larger.color[i] + smaller_area * smaller.color[i]) / total_area) for i in range(3))
                    larger.color = new_color

                    # Remove smaller glob if its radius becomes zero
                    if smaller.radius <= 0:
                        globs.remove(smaller)
                        if smaller.set_id in glob_sets and smaller in glob_sets[smaller.set_id]:
                            glob_sets[smaller.set_id].remove(smaller)
                            self.num_globs -= 1 # decrement the num_globs of the parent glob
                        removed = True
                        break

        # Check if the glob should split, outside the loop
        if self.radius > MAX_RADIUS:
            new_globs = self.split(globs)
            if new_globs:
                globs.extend(new_globs)
                if not removed and self in globs:
                    globs.remove(self)
                    self.num_globs -= 1 # decrement the num_globs of the parent glob

def attract_smaller_globs(globs, min_radius):
    force = 0.3/4.6
    for glob1 in globs:
        if glob1.radius < min_radius:
            nearest_larger_glob = None
            nearest_distance = float('inf')
            for glob2 in globs:
                if glob2.radius >= min_radius and glob2 != glob1:
                    distance = math.sqrt((glob1.x - glob2.x) ** 2 + (glob1.y - glob2.y) ** 2 + (glob1.z - glob2.z) ** 2)
                    if distance < nearest_distance:
                        nearest_larger_glob = glob2
                        nearest_distance = distance
            if nearest_larger_glob is not None:
                attraction_force = force * (min_radius / nearest_distance)
                dx = nearest_larger_glob.x - glob1.x
                dy = nearest_larger_glob.y - glob1.y
                dz = nearest_larger_glob.z - glob1.z
                norm = math.sqrt(dx**2 + dy**2 + dz**2)
                glob1.vx += dx / norm * attraction_force
                glob1.vy += dy / norm * attraction_force
                glob1.vz += dz / norm * attraction_force

def get_attraction_force(color1, color2):
    h1, s1, v1 = rgb_to_hsv(*(c / 255 for c in color1))
    h2, s2, v2 = rgb_to_hsv(*(c / 255 for c in color2))

    hue_diff = abs(h1 - h2)
    saturation_diff = abs(s1 - s2)

    attraction_strength = (1 - hue_diff) * (1 - saturation_diff)
    attraction_force = 0.0002 * attraction_strength

    return attraction_force

def get_scale_factor(z, depth):
    return 1 - (z / depth)

def average_glob_hsv(globs):
    if len(globs) == 0:
        return (0, 0, 0)  # default background color if there are no globs

    num_globs = len(globs)
    total_h, total_s, total_v = 0, 0, 0
    for glob in globs:
        h, s, v = rgb_to_hsv(*(c / 255 for c in glob.color))
        total_h += h
        total_s += s
        total_v += v

    avg_h = total_h / num_globs
    avg_s = total_s / num_globs
    avg_v = total_v / num_globs

    return avg_h, avg_s, avg_v

def get_random_color():
    r = random.randint(100, 255)
    g = random.randint(100, 255)
    b = random.randint(100, 255)
    return (r, g, b)

def main():
    global start
    pygame.init()
    screen = pygame.display.set_mode((WIDTH, HEIGHT))
    pygame.display.set_caption("Nia.S & ChatGPT's Lavalamp")
    clock = pygame.time.Clock()

    a, b, c = WIDTH / 2, HEIGHT / 2, DEPTH / 2

    globs = [Glob(*random_point_on_ellipsoid(a, b, c),
                  random.uniform(MIN_RADIUS, MAX_RADIUS),
                  get_random_color(),
                  str(uuid.uuid4())) for _ in range(INITIAL_GLOBS)]

    # Initialize the glob sets with the initial globs
    glob_sets = {i: {glob} for i, glob in enumerate(globs)}

    # Initialize audio mixer
    pygame.mixer.init(channels=NUM_CHANNELS + 1, buffer=AUDIO_BUFFER_SIZE)
    channel_group1 = pygame.mixer.Channel(0)
    channel_group2 = pygame.mixer.Channel(NUM_CHANNELS - 1)


    # Generate initial buffers for both intervals
    buffers1 = [generate_next_buffer(globs) for _ in range(3)]
    buffers2 = [generate_next_buffer(globs) for _ in range(3)]

    buffer_index1 = 0
    buffer_index2 = 0
    prev_buffer1 = buffers1[buffer_index1]
    prev_buffer2 = buffers2[buffer_index2]

    running = True
    while running:

        # Update background color
        try:
            avg_h, avg_s, avg_v = average_glob_hsv(globs)
            bg_color = tuple(int(c * 255) for c in hsv_to_rgb(1 - avg_h, 1 - avg_s, 1 - avg_v))
            screen.fill(bg_color)
            last_valid_bg_color = bg_color
        except ValueError:
            if last_valid_bg_color is not None:
                screen.fill(last_valid_bg_color)
            else:
                r, g, b = bg_color
                avg_value = (r + g + b) // 3
                default_color = (64, 64, 64) if avg_value >= 128 else (255, 255, 255)
                screen.fill(default_color)

        # Event handling
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
                pygame.quit()

            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_f:
                    if screen.get_flags() & pygame.FULLSCREEN:
                        pygame.display.set_mode((WIDTH, HEIGHT))
                    else:
                        pygame.display.set_mode((WIDTH, HEIGHT), pygame.FULLSCREEN)

        new_globs = []

        # Sort globs based on z-axis
        sorted_globs = sorted(globs, key=lambda g: g.z, reverse=True)

        # Attract smaller globs to the nearest larger glob
        attract_smaller_globs(globs, MIN_RADIUS)

        # Draw globs in order of z-axis
        for glob in sorted_globs:
            result = glob.update(globs, glob_sets)
            if result:
                new_globs.extend(result)

            glob.draw(screen, bg_color)

        # Update and play audio buffers for both intervals
        prev_buffer1 = play_buffer(channel_group1, buffers1[buffer_index1], prev_buffer1)
        buffer_index1 = (buffer_index1 + 1) % 3
        buffers1[buffer_index1] = generate_next_buffer(globs)

        prev_buffer2 = play_buffer(channel_group2, buffers2[buffer_index2], prev_buffer2)
        buffer_index2 = (buffer_index2 + 1) % 3
        buffers2[buffer_index2] = generate_next_buffer(globs)

        # Update the display and tick the clock
        pygame.display.flip()
        clock.tick(FPS)

        # Add new globs to the list
        globs.extend(new_globs)

        # Remove globs that have radius less than 1
        globs = [glob for glob in globs if glob.radius >= 1]

        # Update the num_globs attribute of all globs
        num_globs = len(globs)
        for glob in globs:
            glob.num_globs = num_globs

    pygame.quit()

if __name__ == "__main__":
    main()

